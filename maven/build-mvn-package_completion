#!/usr/bin/env bash

# =======================================
# @author		: parkjunhong77@gmail.com
# @title		: build maven projects with user-custom 'profile' for build.
# @license		: Apache License 2.0
# @since		: 2021-03-25
# @desc			: support macOS 11.2.3, Ubuntu 18.04, CentOS 7
# @installation	: 
#		1. insert 'source <path>/build-mvn-package_completion" into ~/bin/.bashrc or ~/bin/.bash_profile for a personal usage.
#		2. copy the above file to /etc/bash_completion.d/ or insert 'source <path>/build-mvn-package_completion' into /etc/bashrc for all users.
# =======================================

# Global Reserved Variables
# 1. COMP_WORDS: an array, contains all arguments
# 2. COMP_CWORD: a index of a cursor
# 3. COMP_LINE: all command string
# 4. COMPREPLY: an array, contains suggested words. words are sorted and unique.

# Arguments of a function
# 1. $1: command
# 2. $2: current
# 3. $3: previous
#
# e.g.: mycmd arg1 arg2 arg3 arg4[tab]
# - $1: mycmd
# - $2: arg4
# - $3: arg3

# initialize arguments
declare -A ARGS
ARGS["-d"]="--deploy"
ARGS["-h"]="--help"
ARGS["-p"]="--profile"
ARGS["-t"]="--test"
ARGS["-u"]="--update"

# $1: found
# $2: added
_add_if_new(){
	local __new=1
	for word in ${COMP_WORDS[@]}
	do
		if [ "$word" = "$1" ];then
			_log "'$word' already exists"
			__new=0
			break
		fi
	done

	if [ $__new -eq 1 ];then
		for word in ${COMP_WORDS[@]}
		do
			if [ "$word" = "$2" ];then
				_log "'$2' already exists"
				__new=0
				break
			fi
		done
		if [ $__new -eq 1 ];then
			COMPREPLY+=("$2")
		fi
	fi
}

_add_default_options(){
	local _keys=(${!ARGS[@]})

	for key in ${_keys[@]}
	do
		_add_if_new "$key" "${ARGS[$key]}"
	done
}

# $1: directory path
 _read_profiles(){
 	local _profiles=()
	if [ ! -d "$PWD/config" ];then
		echo ""
	else
		for dir in $(ls -p "$PWD/config" | grep -E "^[^/]+/$" 2>/dev/null);
		do
			_profiles+=(${dir::-1})
		done
		echo ${_profiles[@]}
	fi
}

# $1: current
# $2: previous
_handle_current(){
	_log "in '_handle_current' " $@
	case "$1" in
		-d | --d*)
			COMPREPLY+=("-d")
			;;
		-h | --h*)
			COMPREPLY+=("-h")
			;;
		-p | --p*)
			COMPREPLY+=("-p")
			;;
		-t | --t*)
			COMPREPLY+=("-t")
			;;
		-u | --u*)
			COMPREPLY+=("-u")
			;;
		*)
			_add_default_options
			;;
	esac
}

# $1: current
# $2: previous
_handle_previous(){
	_log "in '_handle_previous' \$1: $1, \$2:$2"
	case "$2" in
		-d | --d*)
			_handle_current "$1"
			;;
		-h | --h*)
			_handle_current "$1"
			;;
		-p | --p*)
			if [ -z "$1" ];then
				#COMPREPLY+=( $(compgen -W "$(find $PWD/config -mindepth 1 -maxdepth 1 -type d -printf '%P ')") )
				COMPREPLY+=( $(compgen -W "$(_read_profiles)") )
			else
				#local _words=$(compgen -W "$(find $PWD/config -mindepth 1 -maxdepth 1 -type d -printf '%P ')" -- $1)
				local _words=$(compgen -W "$(_read_profiles)" -- $1)
				_log "_words=${_words[@]}"
				if [ ${#_words[@]} -gt 0 ];then
					COMPREPLY+=(${_words[@]})
				fi
			fi
			;;	
		-t | --t*)
			_handle_current "$1" 
			;;
		-u | --u*)
			_handle_current "$1"
			;;
		*)
			_handle_current "$1"
			;;
	esac
}

_log(){
#	echo "$@" >> ~/build-mvn-package_completion.log
	echo "$@" >/dev/null
}

# $1: command
# $2: current
# $3: previous
_profile(){
	_log "-----------------------------------------------------"
	_log $(printf "[%s] %-15s: %s" "$(date +'%Y/%m/%d %H:%M:%S')" "COMP_WORDS" "${COMP_WORDS[@]}")
	_log $(printf "[%s] %-15s: %s" "$(date +'%Y/%m/%d %H:%M:%S')" "COMP_LINE" "${COMP_LINE}")
	_log $(printf "[%s] %-15s: %s, %s: %s" "$(date +'%Y/%m/%d %H:%M:%S')" "COMP_CWORD" "$COMP_CWORD" "#WORDS" "${#COMP_WORDS[@]}") 
	_log $(printf "[%s] %s: %s, %s: %s" "$(date +'%Y/%m/%d %H:%M:%S')" "CURRENT" "$2" "PREVIOUS" "$3")

	if [ $COMP_CWORD -eq 1 ];then
		_handle_current "$2" "$3"
	else
		_handle_previous "$2" "$3"
	fi
}

# create a log file.



complete -F _profile build-mvn-package
