#!/usr/bin/env bash

# =======================================
# @auther : parkjunhong77@gmail.com
# @title  : Check nullable of CSV columns.
# @license: Apache License 2.0
# @since  : 2023-07-10
# @desc   : support macOS 11.2.3, Ubuntu 18.04, CentOS 7 or higher
# @completion: csv-column-requried.completion
#			 1. insert 'source <path>/csv-column-required.completion" into ~/bin/.bashrc or ~/bin/.bash_profile for a personal usage.
#			 2. copy the above file to /etc/bash_completion.d/ for all users.
# =======================================

# get a filename
FILENAME=$(basename $0)

INPUT_FILE=""
DELIMITER=""
QUOTECHAR="\""
EMPTY_VALUE="__EMPTY__"
COLUMN_COUNT=0
READ_COUNT=-1
CLMN_NAMES=()
CLMN_REQUIRED=()
RESULT_FILE=""
VERBOSE=0
help(){
	if [ ! -z "$1" ];
	then
		local indent=10
		local formatl=" - %-"$indent"s: %s\n"
		local formatr=" - %"$indent"s: %s\n"
		echo
		echo "================================================================================"
		printf "$formatl" "filename" "$FILENAME"
		printf "$formatl" "line" "$2"
		printf "$formatl" "callstack"
		local idx=1
		for func in ${FUNCNAME[@]:1}
		do
			printf "$formatr" "["$idx"]" $func
			((idx++))
		done
		printf "$formatl" "cause" "$1"
		echo "================================================================================"
	fi
	echo
	echo "Usage:"
	echo "csv-column-required.sh [-h|--help] --file <filepath> --delim <delimiter> --quotechar <quote char> --empty <empty value> --count <column count> --read-count <read count> --clmn-names <column names> --verbose"
	echo
	echo "Options:"
	echo " -c | --count     : count of column"
	echo " -d | --delim     : a delimiter of column"
	echo " -e | --empty     : a string if a value between a delimiter and a delimiter is empty."
	echo "                    default: \"$EMPTY_VALUE\""
	echo " -h | --help      : show help messages"
	echo " -f | --file      : input filepath"
	echo " -n | --clmn-names: column name list. separated by comma(,)."
	echo " -q | --quotechar : quoted character. default: double quoted ($QUOTECHAR)."
	echo " -r | --read-count: read lines."
	echo " -v | --verbose   : show error message."
}

while [ ! -z "$1" ];
do
	case "$1" in
		-c | --count)
			shift
			if ! [[ $1 =~ [0-9]+ ]];then
				help "Invalid 'line' count: $1" $LINENO
				exit 1
			fi
            COLUMN_COUNT=$1
            ;;
		-d | --delim)
			shift
			DELIMITER="$1"
			;;
		-e | --empty)
			shift
			if [ -z "$1" ];then
				help "Invalid 'empty value'. input: $1" $LINENO
				exit 1
			fi
			EMPTY_VALUE="$1"
			;;
		-f | --file)
			shift
			if [ ! -f "$1" ];then
				help "Invalid 'input file': filepath: $1" $LINENO
				exit 1
			fi
			INPUT_FILE="$1"
			RESULT_FILE="$1.validated"
			;;
		-h | --help)
			help
			exit 0
			;;
		-n | --clmn-names)
			shift
			IFS="," read -ra CLMN_NAMES <<< "$1"
			;;
		-q | --quotechar)
			shift
			if [ -z "$1" ] || [ "${#1}" -ne 1 ];then
				help "Invalid 'quote char'. input: $1" $LINENO
				exit 1
			fi
			QUOTECHAR="$1"
			;;
		-r | --read-count)
			shift
			if ! [[ $1 =~ [0-9]+ ]];then
				help "Invalid 'line' count: $1" $LINENO
				exit 1
			fi
            READ_COUNT=$1
            ;;
		-v | --verbose)
			VERBOSE=1
			;;
		*)
			;;
	esac
	shift
done

# 필수 데이터 검증
if [ -z "$DELIMITER" ] || ! [ $COLUMN_COUNT -gt 0 ] || [ -z "$EMPTY_VALUE" ];then
	help "Invalid parameters: delimiter='$DELIMITER', data-count=$COLUMN_COUNT, empty-string='$EMPTY_VALUE'" $LINENO
	exit 1
fi 

# 컬럼 길이와 컬럼명 검증
clmn_idx=0
if [ ${#CLMN_NAMES[@]} -lt 1 ];
then
	while [ $clmn_idx -lt $COLUMN_COUNT ];
	do
		CLMN_NAMES+=("clmn-$clmn_idx")
		((clmn_idx++))
	done
else
	clmn_count=${#CLMN_NAMES[@]}
	if [ $clmn_count -lt $COLUMN_COUNT ];
	then
		clmn_idx=$clmn_count
		while [ $clmn_idx -lt $COLUMN_COUNT ];
		do
			CLMN_NAMES+=("clmn-$clmn_idx")
			((clmn_idx++))
		done
	elif [ $clmn_count -gt $COLUMN_COUNT ];
	then
		CLMN_NAMES=("${CLMN_NAMES[@]:0:$COLUMN_COUNT}")
	fi
fi

# 컬럼 요구사항 배열 초기화
clmn_idx=0
while [ $clmn_idx -lt $COLUMN_COUNT ];
do
	CLMN_REQUIRED+=(1)
	((clmn_idx++))
done

_fmt_=" * * * %-15s"
echo
printf "$_fmt_: %s \n" "File" "$INPUT_FILE"
printf "$_fmt_: %s \n" "Delimiter" "$DELIMITER"
printf "$_fmt_: %s \n" "QuoteChar" "$QUOTECHAR"
printf "$_fmt_: %s \n" "Empty.Str" "$EMPTY_VALUE"
printf "$_fmt_: %s \n" "Data.Count" $COLUMN_COUNT
printf "$_fmt_: %s \n" "Read.Count" $READ_COUNT
printf "$_fmt_: %s \n" "Column.Names" $(IFS=$','; echo "${CLMN_NAMES[*]}")
printf "$_fmt_: %s \n" "Column.Required" $(IFS=$','; echo "${CLMN_REQUIRED[*]}")
printf "$_fmt_: %s \n\n" "Error.logfile" "$RESULT_FILE"

PROG_MOD=10
dotprogress(){
	local idx=0
	prog=""
	while [ $idx -lt $PROG_MOD ];
	do
		prog=${prog}"."
		echo ${prog}
		((idx++))
	done
}

##
# convert timestamp to {hours}h {minutes}m {seconds}h.
# @param $1 {number} timestamp
# @return 
timestamp-to-hms(){
	# 1234567890
	local _sec_r=$(($1%60)) # 'second' remainder
	local _min_q=$(($1/60)) # 'minutes' quotient
	local _min_r=$(($1/60%60)) # 'minutes' remainder
	local _hour_q=$(($1/60/60)) # 'hour' quotient

	printf "%'dh %sm %ss" $_hour_q $_min_r $_sec_r
}


__parse_line__=()
##
# read a string as csv data.
#
# @param $1 {string} string
# @param $2 {char} delimiter
# @param $3 {char} quote character 
# @param $4 {string} a string if a value between a delimiter and a delimiter is empty
# @return update __parse_line__
read-csv-str(){
	local _str="$1"
	local _delim="$2"
	local _quote="$3"

	local _len=${#_str}
	local _idx=0
	
	local _buf=""
	# quotation 열린 상태 여부
	local _oq=0
	# 현재 문자
	local _c=""
	# 이전 문자
	local __c=""

	local _empty="$4"

	# buf 비운 상태 여부 
	local _flush=1
	__parse_line__=()

#	 echo 

	while [ $_idx -lt $_len ];
	do
		_c=${_str:$_idx:1}
#		echo "oq=$_oq, index=$_idx, char=>$_c<"
		if [ "$_c" = "$_delim" ];then
			if [ $_oq -eq 1 ];then
				_buf="$_buf$_c"
				_flush=0
			# empty between $_delim and $_delim
			elif [ $_flush -eq 1 ];then
				if [ "$__c" != "$_quote" ];then
					__parse_line__+=($_empty)
				fi
			else
				__parse_line__+=("$_buf")
				_buf=""
				_flush=1
			fi
		elif [ "$_c" = "$_quote" ];then
			if [ $_oq -eq 0 ];then
				_oq=1
			else
				#__parse_line__+=("$_buf")
				#_buf=""
				#_flush=1
				_oq=0
			fi
		else
			_buf="$_buf$_c"
			_flush=0
		fi
		__c=$_c
		((_idx++))
	done

	# 마지막 데이터가 비어 있는 경우
	if [ "$_c" = "$_delim" ];then
		_buf="$_buf""$_empty"
	fi

	if [ ! -z "$_buf" ];then
		__parse_line__+=("$_buf")
		_buf=""
		_flush=1
#		echo "_buf=$_buf"
	fi
}


##
# @param $1 {string} source filepath.
# @param $2 {char} delimiter
# @param $3 {char} quotechar
# @param $4 {string} a string if a value between a delimiter and a delimiter is empty
# @param $5 {number} a length of splitted string by a delimiter
# @param $6 {number} a count of read lines
# @param $7 {string} a invalid string's log filepath.
#
validate(){
	local _inputfile="$1"
	local _delim="$2"
	local _quotechar="$3"
	local _empty="$4"
	local _count=$5
	local _read_count=$6
	local _resultfile="$7"

	local _ln=0
	local _errcnt=0
	progress=($(dotprogress))

	local _begin_date=$(date +"%Y/%m/%d %H:%M:%S")
	local _begin_ts=$(date +"%s")

	echo
	if [ $VERBOSE -eq 1 ];then
		echo " ????????????????????????????????????????????????"
	fi
	printf "" > "$_resultfile"

	local _read=0
	local _hit=0
	while IFS= read -r line
	do
		_hit=0
		((_ln++))

		_clmn_req_cnt=$_count
		read-csv-str "$line" "$_delim" "$_quotechar" "$_empty"
		_parse_count=${#__parse_line__[@]}
#		echo
#		echo "__parse_line__=${__parse_line__[@]}"
#		echo "_parse_count=$_parse_count"
#		echo
		if [ $_parse_count -ne $_count ];then
			printf "%'10d | " $_ln >> "$_resultfile"
			echo $line >> "$_resultfile"
			((_errcnt++))
	
			if [ $VERBOSE -eq 1 ];then
				printf "\r\033[K > > > | %'10d | %s\n" $_ln "$line"
				_hit=1
			fi
			
			if [ $_parse_count -lt $_count ];then
				_clmn_req_cnt=$_parse_count
			fi
		fi

		_idx_req_cnt=0
		while [ $_idx_req_cnt -lt $_clmn_req_cnt ];
		do
			if [ "${__parse_line__[$_idx_req_cnt]}" = "$_empty" ];then
				CLMN_REQUIRED[$_idx_req_cnt]=$((CLMN_REQUIRED[$_idx_req_cnt] * 0))
			else
				CLMN_REQUIRED[$_idx_req_cnt]=$((CLMN_REQUIRED[$_idx_req_cnt] * 1))
			fi
			((_idx_req_cnt++))
		done
		
		printf "\r\033[F + + + %-15s: %s\n" "Column.Required" $(IFS=$','; echo "${CLMN_REQUIRED[*]}")		
		printf "\r\033[K + + + %-15s: %'d / %'d | %s" "Line.Reading" $_errcnt $_ln ${progress[(($_ln%$PROG_MOD))]}

		((_read++))
		if [ $_read_count -gt -1 ] && [ $_read -ge $_read_count ];then
			break
		fi
	done < "$_inputfile"

	if [ $VERBOSE -eq 1 ] && [ $_hit -eq 1 ];then
		printf "\r\033[K"
		echo " ????????????????????????????????????????????????"
		echo
	fi

	printf "\r\033[F + + + %-15s: %s \n" "Column.Required" $(IFS=$','; echo "${CLMN_REQUIRED[*]}")		
	printf "\r\033[K + + + %-15s: %'d / %'d\n" "Completed" ${_errcnt} $_ln
	
	local _end_date=$(date +"%Y/%m/%d %H:%M:%S")
	local _end_ts=$(date +"%s")	

	echo
	printf " - - - %-13s: %s\n" "Read.begin" "$_begin_date"	
	# Convert timestamp to hour/minite/second
	# Referenced: https://stackoverflow.com/questions/29405432/how-to-convert-timestamp-to-hour-minutes-seconds-in-shell-script
	local _diff=$(($_end_ts-$_begin_ts))
	printf " - - - %-13s: %s\n" "Read.elapsed" "$(timestamp-to-hms $(($_end_ts-$_begin_ts)))"
	printf " - - - %-13s: %s\n" "Read.end" "$_end_date"	

	echo
	echo "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
}



validate "$INPUT_FILE" "$DELIMITER" "$QUOTECHAR" "$EMPTY_VALUE" "$COLUMN_COUNT" "$READ_COUNT" "$RESULT_FILE" $VERBOSE

exit 0
