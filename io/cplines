#!/usr/bin/env bash

# =======================================
# @auther : parkjunhong77@gmail.com
# @title  : copy lines as many as specified.
# @license: Apache License 2.0
# @since  : 2021-04-19
# @desc   : support macOS 11.2.3, Ubuntu 18.04, CentOS 7 or higher
# @completion: cplines.completion
#			 1. insert 'source <path>/cplines.completion" into ~/bin/.bashrc or ~/bin/.bash_profile for a personal usage.
#			 2. copy the above file to /etc/bash_completion.d/ for all users.
# =======================================

# get a filename
FILENAME=$(basename $0)

help(){
	if [ ! -z "$1" ];
	then
		local indent=10
		local formatl=" - %-"$indent"s: %s\n"
		local formatr=" - %"$indent"s: %s\n"
		echo
		echo "================================================================================"
		printf "$formatl" "filename" "$FILENAME"
		printf "$formatl" "line" "$2"
		printf "$formatl" "callstack"
		local idx=1
		for func in ${FUNCNAME[@]:1}
		do
			printf "$formatr" "["$idx"]" $func
			((idx++))
		done
		printf "$formatl" "cause" "$1"
		echo "================================================================================"
	fi
	echo
	echo "Usage:"
	echo "cplines [-h|--help] --src <source-file> --dst <destination-file> --linenumber <line number to begin to copy> --count <line count to copy>"
	echo
	echo "Options:"
	echo " -c | --count : line count to copy"
	echo " -d | --dst   : destination filepath"
	echo " -h | --help  : show help messages."
	echo " -l | --linenumber: line number to begin to copy"
	echo " -s | --src   : source filepath"
}

LINENUMBER=-1
COUNT=-1
DST=""
SRC=""
while [ ! -z "$1" ];
do
	case "$1" in
		-c | --count)
			shift
			if ! [[ $1 =~ [0-9]+ ]];then
				help "Invalid 'line' count: $1" $LINENO
				exit 1
			fi
			COUNT=$1
			;;
		-d | --dst)
			shift
			if [ -d "$1" ];then
				help "Invalid 'destination'. May a directory: $1" $LINENO
				exit 1
			fi

			if [ -f "$1" ];then
				echo
				read -p "Already exists. Overwrite? [Y/N] " answer
				if [ $(echo $answer | tr [:lower:] [:upper:]) != "Y" ];then
					help "Invalid 'destination' filepath: $1" $LINENO
					echo "Bye~"
					exit 0
				fi
			fi
			DST="$1"
			;;
		-h | --help)
			help
			exit 0
			;;
		-l | --linenumber)
			shift
			if ! [[ $1 =~ [0-9]+ ]];then
				help "Invalid 'line' offset: $1" $LINENO
				exit 1
			fi
			LINENUMBER=$1
			;;
		-s | --src)
			shift
			if [ ! -f "$1" ];then
				help "Invalid 'source' filepath: $1" $LINENO
				exit 1
			fi
			SRC="$1"
			;;
		*)
			;;
	esac
	shift
done

if [ -z "$SRC" ] || [ -z "$DST" ] || [ $LINENUMBER -eq 0 ] || [ $COUNT -eq 0 ];then
	help "Invalid parameters: source=$SRC, destination=$DST, offset=$LINENUMBER, line-count=$COUNT" $LINENO
	exit 1
fi 

_fmt_=" * * * %-12s"
echo
printf "$_fmt_: %s \n" "Source" "$SRC"
printf "$_fmt_: %s \n" "Destination" "$DST"
printf "$_fmt_: %'d\n" "Line.Begin" $LINENUMBER
printf "$_fmt_: %'d\n" "Line.Counts" $COUNT


PROG_MOD=10
dotprogress(){
	local idx=0
	prog=""
	while [ ${idx} -lt ${PROG_MOD} ];
	do
		prog=${prog}"."
		echo ${prog}
		((idx++))
	done
}

##
# convert timestamp to {hours}h {minutes}m {seconds}h.
# @param $1 {number} timestamp
# @return 
timestamp-to-hms(){
	# 1234567890
	local _sec_r=$(($1%60)) # 'second' remainder
	local _min_q=$(($1/60)) # 'minutes' quotient
	local _min_r=$(($1/60%60)) # 'minutes' remainder
	local _hour_q=$(($1/60/60)) # 'hour' quotient

	printf "%'dh %sm %ss" $_hour_q $_min_r $_sec_r
}

##
# @param $1 {string} source filepath.
# @param $2 {string} destinatin filepath.
# @param $3 {number} line number to begin to copy
# @param $4 {number} line count to copy
#
copy-lines(){
	local _src="$1"
	local _dst="$2"
	local _begin=$3
	local _max_cnt=$4


	local _ln=0
	local _cnt=0
	progress=($(dotprogress))

	local _begin_date=$(date +"%Y/%m/%d %H:%M:%S")
	local _begin_ts=$(date +"%s")

	echo
	printf "" > "$_dst"
	while IFS= read -r line
	do
		((_ln++))
		if [ $_ln -ge $_begin ];then
			#printf "$line\n" >> "$_dst"
			echo "$line" >> "$_dst"
			((_cnt++))
		fi
		printf "\r\033[K + + + %-12s: %'d | %s" "Line.Reading" ${_ln} ${progress[((${_ln}%${PROG_MOD}))]}
		if [ $_cnt -ge $_max_cnt ];then
			break
		fi
	done < "$_src"

	printf "\r\033[K + + + %-12s: %'d\n" "Completed" ${_ln}
	
	local _end_date=$(date +"%Y/%m/%d %H:%M:%S")
	local _end_ts=$(date +"%s")	

	echo
	printf " - - - %-12s: %s\n" "Read.begin" "$_begin_date"	
	# Convert timestamp to hour/minite/second
	# Referenced: https://stackoverflow.com/questions/29405432/how-to-convert-timestamp-to-hour-minutes-seconds-in-shell-script
	local _diff=$(($_end_ts-$_begin_ts))
	printf " - - - %-12s: %s\n" "Read.elapsed" "$(timestamp-to-hms $(($_end_ts-$_begin_ts)))"
	printf " - - - %-12s: %s\n" "Read.end" "$_end_date"	

	echo
	echo "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
}



copy-lines "$SRC" "$DST" $LINENUMBER $COUNT

exit 0
