#!/usr/bin/env bash

# =======================================
# @auther : parkjunhong77@gmail.com
# @title  : concatenate files.
# @license: Apache License 2.0
# @since  : 2021-05-24
# @desc   : support macOS 11.2.3, Ubuntu 18.04, CentOS 7 or higher
# @completion: pings.completion
#			 1. insert 'source <path>/pings.completion" into ~/bin/.bashrc or ~/bin/.bash_profile for a personal usage.
#			 2. copy 'pings.completion' file to /etc/bash_completion.d/ for all users.
# =======================================

# get a filename
FILENAME=$(basename $0)

help(){
	if [ ! -z "$1" ];
	then
		local indent=10
		local formatl=" - %-"$indent"s: %s\n"
		local formatr=" - %"$indent"s: %s\n"
		echo
		echo "================================================================================"
		printf "$formatl" "filename" "$FILENAME"
		printf "$formatl" "line" "$2"
		printf "$formatl" "callstack"
		local idx=1
		for func in ${FUNCNAME[@]:1}
		do
			printf "$formatr" "["$idx"]" $func
			((idx++))
		done
		printf "$formatl" "cause" "$1"
		echo "================================================================================"
	fi
	echo
	echo "Usage:"
	echo "pings [-h|--help] --hosts <target IPv4> <ping's arguments & options>"
	echo
	echo "Arguments:"
	echo " --host     : (m) target IPs"
	echo " -h | --help: show help messages."
	echo
	echo "e.g.:"
	echo "pings --hosts 192.168.0.2 192.168.0.4 -i 0.1 -c 10 -W 2"
	echo " --hosts   : command's argument."
	echo " -i, -c, -W: ping's arguments."
	echo
	echo "---------------------------------------------------------------------------"
	echo "'ping's help message."
	echo
	ping -h
	echo "---------------------------------------------------------------------------"
}

isInt(){
	if [[ "$1" =~ ^[1-9]([0-9]+)?$ ]];then
		return 1
	else
		return 0
	fi
}

isNum(){
	if [[ "$1" =~ ^([0-9]+\.)?[0-9]+$ ]];then
		return 1
	else
		return 0
	fi
}

# [0.0.0.0 - 255.255.255.255
IPV4_REGEX="^(1?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])(\.(1?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])){3}"

# argument's variables
HOSTS=()
PING_ARGS=()

# 기본설정값
COUNT=10
INTERVAL=0.2
PKT_SIZE=64
TIMEOUT=2

while [ ! -z "$1" ];
do
	case "$1" in
		-h | --help)
			help
			exit 0
			;;
		--hosts) 
			shift
			host="$1"
			if ! [[ $host =~ $IPV$_REGEX ]];then
				help "올바른 IPv4 정보가 아닙니다. 입력=$1" $LINENO
				exit 1;
			fi
			HOSTS+=("$1")
			;;
		# begin: 'ping's arguments
		-c)
			shift
			isInt "$1"
			if [ $? != 1 ];then
				help "잘못된 count 설정입니다. -c=$1" $LINENO
				exit 1
			fi
			COUNT=$1
			;;
		-i)
			shift
			isNum "$1"
			if [ $? != 1 ];then
				help "잘못된 interval 설정입니다. -i=$1" $LINENO
				exit 1
			fi
			INTERVAL=$1
			;;
		-s)
			shift
			isInt "$1"
			if [ $? != 1 ];then
				help "잘못된 packetsize 설정입니다. -s=$1" $LINENO
				exit 1
			fi
			PKT_SIZE=$1
			;;
		-W)
			shift
			isInt "$1"
			if [ $? != 1 ];then
				help "잘못된 timeout 설정입니다. -W=$1" $LINENO
				exit 1
			fi
			TIMEOUT=$1
			;;
 		-I | -m | -M | -l | -p | -Q | -S | -t | -T | -w )
			PING_ARGS+=("$1")
			shift
			PING_ARGS+=("$1")
			;;
		# end: 'ping's arguments
		*)
			if [ ${#HOSTS[@]} -lt 1 ];then
				help "측정대상 옵션을 설정하지 않았습니다: $@" $LINENO
				exit 1
			fi

			host="$1"
			if ! [[ $host =~ $IPV$_REGEX ]];then
				help "올바른 IPv4 정보가 아닙니다. 입력=$1" $LINENO
				exit 1;
			fi

			HOSTS+=("$1")
			;;
	esac
	shift
done

if [ ${#HOSTS[@]} -lt 1 ];then
	help "측정대상이 설정되지 않았습니다: ${HOSTS[@]}" $LINENO
	exit 1
fi

PING_ARGS+=()

PING_ARGS+=("-c")
PING_ARGS+=($COUNT)
PING_ARGS+=("-i")
PING_ARGS+=($INTERVAL)
PING_ARGS+=("-s")
PING_ARGS+=($PKT_SIZE)
PING_ARGS+=("-W")
PING_ARGS+=($TIMEOUT)
PING_ARGS+=("-q")

#execute 'ping' command.
exec_ping(){
	sudo ping $@
}

fmt="=============== IPv4: %-15s ==============="
printf "$fmt\n" ${HOSTS[0]}
exec_ping ${PING_ARGS[@]} ${HOSTS[0]}

for host in ${HOSTS[@]:1}
do
	printf "$fmt\n" $host
	exec_ping ${PING_ARGS[@]} $host
done

echo
exit 0


